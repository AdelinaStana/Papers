@inproceedings{Sangal:2005:UDM:1094811.1094824,
 author = {Sangal, Neeraj and Jordan, Ev and Sinha, Vineet and Jackson, Daniel},
 title = {Using Dependency Models to Manage Complex Software Architecture},
 booktitle = {Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications},
 series = {OOPSLA '05},
 year = {2005},
 isbn = {1-59593-031-0},
 location = {San Diego, CA, USA},
 pages = {167--176},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1094811.1094824},
 doi = {10.1145/1094811.1094824},
 acmid = {1094824},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {DSM, architecture, dependency, matrix, model},
} 

@Article{CalloArias2011,
author="Callo Arias, Trosky B.
and van der Spek, Pieter
and Avgeriou, Paris",
title="A practice-driven systematic review of dependency analysis solutions",
journal="Empirical Software Engineering",
year="2011",
month="Oct",
day="01",
volume="16",
number="5",
pages="544--586",
abstract="When following architecture-driven strategies to develop large software-intensive systems, the analysis of the dependencies is not an easy task. In this paper, we report a systematic literature review on dependency analysis solutions. Dependency analysis concerns making dependencies due to interconnections between programs or system components explicit. The review is practice-driven because its research questions, execution, and reporting were influenced by the practice of a group of software architects at Philips Healthcare MRI. The review results in an overview and assessment of the state-of-the-art and applicability of dependency analysis. The overview provides insights about definitions related to dependency analysis, the sort of development activities that need dependency analysis, and the classification and description of a number of dependency analysis solutions. The contribution of this paper is for both practitioners and researchers. They can take it as a reference to learn about dependency analysis, match their own practice to the presented results, and to build similar overviews of other techniques and methods for other domains or types of systems.",
issn="1573-7616",
doi="10.1007/s10664-011-9158-8",
url="https://doi.org/10.1007/s10664-011-9158-8"
}

@conference{enase19,
author={Adelina Diana Stana. and Ioana Şora.},
title={Identifying Logical Dependencies from Co-Changing Classes},
booktitle={Proceedings of the 14th International Conference on Evaluation of Novel Approaches to Software Engineering - Volume 1: ENASE,},
year={2019},
pages={486-493},
publisher={SciTePress},
organization={INSTICC},
doi={10.5220/0007758104860493},
isbn={978-989-758-375-9},
}


@article{DBLP:journals/jss/AjienkaC17,
  author    = {Nemitari Ajienka and
               Andrea Capiluppi},
  title     = {Understanding the interplay between the logical and structural coupling
               of software classes},
  journal   = {Journal of Systems and Software},
  volume    = {134},
  pages     = {120--137},
  year      = {2017},
  url       = {https://doi.org/10.1016/j.jss.2017.08.042},
  doi       = {10.1016/j.jss.2017.08.042},
  timestamp = {Fri, 03 Nov 2017 18:35:56 +0100},
  biburl    = {https://dblp.org/rec/bib/journals/jss/AjienkaC17},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{structdep,
author = {Binkley, David},
year = {2007},
month = {06},
pages = {104-119},
title = {Source Code Analysis: A Road Map},
isbn = {0-7695-2829-5},
journal = {FoSE 2007: Future of Software Engineering},
doi = {10.1109/FOSE.2007.27}
}

@InProceedings{wiese,
author="Wiese, Igor Scaliante
and Kuroda, Rodrigo Takashi
and Re, Reginaldo
and Oliva, Gustavo Ansaldi
and Gerosa, Marco Aur{\'e}lio",
editor="Damiani, Ernesto
and Frati, Fulvio
and Riehle, Dirk
and Wasserman, Anthony I.",
title="An Empirical Study of the Relation Between Strong Change Coupling and Defects Using History and Social Metrics in the Apache Aries Project",
booktitle="Open Source Systems: Adoption and Impact",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="3--12",
abstract="Change coupling is an implicit relationship observed when artifacts change together during software evolution. The literature leverages change coupling analysis for several purposes. For example, researchers discovered that change coupling is associated with software defects and reveals relationships between software artifacts that cannot be found by scanning code or documentation. In this paper, we empirically investigate the strongest change couplings from the Apache Aries project to characterize and identify their impact in software development. We used historical and social metrics collected from commits and issue reports to build classification models to identify strong change couplings. Historical metrics were used because change coupling is a phenomenon associated with recurrent co-changes found in the software history. In turn, social metrics were used because developers often interact with each other in issue trackers to accomplish the tasks. Our classification models showed high accuracy, with 70−99 {\%} F-measure and 88−99 {\%} AUC. Using the same set of metrics, we also predicted the number of future defects for the artifacts involved in strong change couplings. More specifically, we were able to predict 45.7 {\%} of defects where these strong change couplings reoccurred in the post-release. These findings suggest that developers and projects managers should detect and monitor strong change couplings, because they can be associated with defects and tend to happen again in the subsequent release.",
isbn="978-3-319-17837-0"
}

@book{svn,
 author = {Collins-Sussman, Ben and Fitzpatrick, Brian W. and Pilato, C. Michael},
 title = {Version Control With Subversion for Subversion 1.6: The Official Guide And Reference Manual},
 year = {2010},
 isbn = {1440495874, 9781440495878},
 publisher = {CreateSpace},
 address = {Paramount, CA},
} 

@inproceedings{Beck:2011:CMC:2025113.2025162,
 author = {Beck, Fabian and Diehl, Stephan},
 title = {On the Congruence of Modularity and Code Coupling},
 booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
 series = {ESEC/FSE '11},
 year = {2011},
 isbn = {978-1-4503-0443-6},
 location = {Szeged, Hungary},
 pages = {354--364},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/2025113.2025162},
 doi = {10.1145/2025113.2025162},
 acmid = {2025162},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {code coupling, modularity, package design},
} 


@article{DBLP:journals/ese/AjienkaCC18,
  author    = {Nemitari Ajienka and
               Andrea Capiluppi and
               Steve Counsell},
  title     = {An empirical study on the interplay between semantic coupling and
               co-change of software classes},
  journal   = {Empirical Software Engineering},
  volume    = {23},
  number    = {3},
  pages     = {1791--1825},
  year      = {2018},
  url       = {https://doi.org/10.1007/s10664-017-9569-2},
  doi       = {10.1007/s10664-017-9569-2},
  timestamp = {Mon, 04 Jun 2018 15:56:43 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/ese/AjienkaCC18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@Article{Poshyvanyk2009,
author="Poshyvanyk, Denys
and Marcus, Andrian
and Ferenc, Rudolf
and Gyim{\'o}thy, Tibor",
title="Using information retrieval based coupling measures for impact analysis",
journal="Empirical Software Engineering",
year="2009",
month="Feb",
day="01",
volume="14",
number="1",
pages="5--32",
abstract="Coupling is an important property of software systems, which directly impacts program comprehension. In addition, the strength of coupling measured between modules in software is often used as a predictor of external software quality attributes such as changeability, ripple effects of changes and fault-proneness. This paper presents a new set of coupling measures for Object-Oriented (OO) software systems measuring conceptual coupling of classes. Conceptual coupling is based on measuring the degree to which the identifiers and comments from different classes relate to each other. This type of relationship, called conceptual coupling, is measured through the use of Information Retrieval (IR) techniques. The proposed measures are different from existing coupling measures and they capture new dimensions of coupling, which are not captured by the existing coupling measures. The paper investigates the use of the conceptual coupling measures during change impact analysis. The paper reports the findings of a case study in the source code of the Mozilla web browser, where the conceptual coupling metrics were compared to nine existing structural coupling metrics and proved to be better predictors for classes impacted by changes.",
issn="1573-7616",
doi="10.1007/s10664-008-9088-2",
url="https://doi.org/10.1007/s10664-008-9088-2"
}


@inproceedings{Oliva:2011:ISL:2067853.2068086,
 author = {Oliva, Gustavo Ansaldi and Gerosa, Marco Aurelio},
 title = {On the Interplay Between Structural and Logical Dependencies in Open-Source Software},
 booktitle = {Proceedings of the 2011 25th Brazilian Symposium on Software Engineering},
 series = {SBES '11},
 year = {2011},
 isbn = {978-0-7695-4603-2},
 pages = {144--153},
 numpages = {10},
 url = {https://doi.org/10.1109/SBES.2011.39},
 doi = {10.1109/SBES.2011.39},
 acmid = {2068086},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {mining software repositories, dependency management, structural analysis, structural dependencies, structural coupling, logical dependencies, logical coupling, software evolution},
} 

@INPROCEEDINGS{Zimmermannj2003,
  author={Zimmermann, T. and Diehl, S. and Zeller, A.},
  booktitle={Sixth International Workshop on Principles of Software Evolution, 2003. Proceedings.}, 
  title={How history justifies system architecture (or not)}, 
  year={2003},
  volume={},
  number={},
  pages={73-83},
  keywords={History;Computer architecture;Computer science;Software systems;Software prototyping;Software design;Visual databases;Visualization;Program processors;Prototypes},
  doi={10.1109/IWPSE.2003.1231213}}


@INPROCEEDINGS{OlivaG152,
  author={Oliva, Gustavo Ansaldi and Gerosa, Marco Aurélio},
  booktitle={2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE)}, 
  title={Experience report: How do structural dependencies influence change propagation? An empirical study}, 
  year={2015},
  volume={},
  number={},
  pages={250-260},
  keywords={Java;Context;Couplings;Software systems;Terminology;Yttrium;change propagation;structural dependencies;dependency analysis;mining software repositories;software analysis;software maintenance},
  doi={10.1109/ISSRE.2015.7381818}}


@inproceedings{DBLP:conf/issre/OlivaG15,
  author    = {Gustavo Ansaldi Oliva and
               Marco Aur{\'{e}}lio Gerosa},
  title     = {Experience report: How do structural dependencies influence change
               propagation? An empirical study},
  booktitle = {26th {IEEE} International Symposium on Software Reliability Engineering,
               {ISSRE} 2015, Gaithersbury, MD, USA, November 2-5, 2015},
  pages     = {250--260},
  year      = {2015},
  url       = {https://doi.org/10.1109/ISSRE.2015.7381818},
  doi       = {10.1109/ISSRE.2015.7381818},
  timestamp = {Thu, 25 May 2017 00:43:41 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/issre/OlivaG15},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{Zimmermann:2004:MVH:998675.999460,
 author = {Zimmermann, Thomas and Weisgerber, Peter and Diehl, Stephan and Zeller, Andreas},
 title = {Mining Version Histories to Guide Software Changes},
 booktitle = {Proceedings of the 26th International Conference on Software Engineering},
 series = {ICSE '04},
 year = {2004},
 isbn = {0-7695-2163-0},
 pages = {563--572},
 numpages = {10},
 url = {http://dl.acm.org/citation.cfm?id=998675.999460},
 acmid = {999460},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 


@ARTICLE{Ying-co-change,
  author={Ying, A.T.T. and Murphy, G.C. and Ng, R. and Chu-Carroll, M.C.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Predicting source code changes by mining change history}, 
  year={2004},
  volume={30},
  number={9},
  pages={574-586},
  keywords={History;Data mining;Association rules;Pattern analysis;Computer Society;Software systems;Computer languages;Frequency;Programming profession;Computer science;Index Terms- Enhancement;maintainability;clustering;classification;association rules;data mining.},
  doi={10.1109/TSE.2004.52}}


@inproceedings{Gall:1998:DLC:850947.853338,
 author = {Gall, Harald and Hajek, Karin and Jazayeri, Mehdi},
 title = {Detection of Logical Coupling Based on Product Release History},
 booktitle = {Proceedings of the International Conference on Software Maintenance},
 series = {ICSM '98},
 year = {1998},
 isbn = {0-8186-8779-7},
 pages = {190--},
 url = {http://dl.acm.org/citation.cfm?id=850947.853338},
 acmid = {853338},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

@inproceedings{Gall:2003:CRH:942803.943741,
 author = {Gall, Harald and Jazayeri, Mehdi and Krajewski, Jacek},
 title = {CVS Release History Data for Detecting Logical Couplings},
 booktitle = {Proceedings of the 6th International Workshop on Principles of Software Evolution},
 series = {IWPSE '03},
 year = {2003},
 isbn = {0-7695-1903-2},
 pages = {13--},
 url = {http://dl.acm.org/citation.cfm?id=942803.943741},
 acmid = {943741},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 


@article{Shtern:2012:CMS:2332427.2332428,
 author = {Shtern, Mark and Tzerpos, Vassilios},
 title = {Clustering Methodologies for Software Engineering},
 journal = {Adv. Soft. Eng.},
 volume = {2012},
 month = jan,
 year = {2012},
 issn = {1687-8655},
 pages = {1:1--1:1},
 articleno = {1},
 numpages = {1},
 url = {http://dx.doi.org/10.1155/2012/792024},
 doi = {10.1155/2012/792024},
 acmid = {2332428},
 publisher = {Hindawi Publishing Corp.},
 address = {New York, NY, United States},
} 


@ARTICLE{sar, 
author={S. Ducasse and D. Pollet}, 
journal={IEEE Transactions on Software Engineering}, 
title={Software Architecture Reconstruction: A Process-Oriented Taxonomy}, 
year={2009}, 
volume={35}, 
number={4}, 
pages={573-591}, 
keywords={software architecture;software maintenance;software packages;process-oriented taxonomy;software architecture reconstruction;software development;Software architecture reconstruction.}, 
doi={10.1109/TSE.2009.19}, 
ISSN={0098-5589}, 
month={July},}

@INPROCEEDINGS{sar-2007,
  author={Pollet, Damien and Ducasse, Stephane and Poyet, Loic and Alloui, Ilham and Cimpan, Sorana and Verjus, Herve},
  booktitle={11th European Conference on Software Maintenance and Reengineering (CSMR'07)}, 
  title={Towards A Process-Oriented Software Architecture Reconstruction Taxonomy}, 
  year={2007},
  volume={},
  number={},
  pages={137-148},
  keywords={Software architecture;Taxonomy;Computer architecture;Application software;Data mining;Packaging;Visualization;Programming;Information analysis;Humans},
  doi={10.1109/CSMR.2007.50}}

@inproceedings{Medvidovi2003StemmingAE,
  title={Stemming Architectural Erosion by Coupling Architectural Discovery and Recovery.},
  author={Nenad Medvidovi{\'c} and Alexander Egyed and Paul Gr{\"u}nbacher},
  year={2003},
  url={https://api.semanticscholar.org/CorpusID:58453425}
}

@INPROCEEDINGS{posh2010, 
author={H. Kagdi and M. Gethers and D. Poshyvanyk and M. L. Collard}, 
booktitle={2010 17th Working Conference on Reverse Engineering}, 
title={Blending Conceptual and Evolutionary Couplings to Support Change Impact Analysis in Source Code}, 
year={2010}, 
volume={}, 
number={}, 
pages={119-128}, 
keywords={information retrieval;public domain software;set theory;software maintenance;source coding;Apache httpd;ArgoUML;KOffice;change impact analysis;conceptual coupling;evolutionary coupling;iBatis;impact sets;information retrieval;open source system;single version software system;source code;Accuracy;Couplings;Data mining;Estimation;Servers;Software systems}, 
doi={10.1109/WCRE.2010.21}, 
ISSN={1095-1350}, 
month={Oct},}


@conference{SoraSem13,
author={Ioana \c{S}ora},
title={Software Architecture Reconstruction through Clustering: Finding the Right Similarity Factors},
booktitle={Proceedings of the 1st International Workshop in Software Evolution and Modernization - Volume 1: SEM, (ENASE 2013)},
year={2013},
pages={45-54},
publisher={SciTePress},
organization={INSTICC},
doi={10.5220/0004599600450054},
isbn={978-989-8565-66-2},
}

@inproceedings{PagerankENASE,
   author    = {Ioana \c{S}ora},
   title     = {Helping Program Comprehension of Large Software Systems by Identifying Their Most Important Classes},
   booktitle = {Evaluation of Novel Approaches to Software Engineering - 
10th International
                Conference, {ENASE} 2015, Barcelona, Spain, April 29-30, 
2015, Revised
                Selected Papers},
   pages     = {122--140},
   year      = {2015},
   publisher = {Springer International Publishing},
   timestamp = {Fri, 19 May 2017 01:26:11 +0200},
   biburl    = {https://dblp.org/rec/bib/conf/enase/Sora15a},
   bibsource = {dblp computer science bibliography, https://dblp.org},
}



@INPROCEEDINGS{PagerankSACI, 
author="{\c{S}}ora, Ioana", 
booktitle={2015 IEEE 10th Jubilee International Symposium on Applied Computational Intelligence and Informatics (SACI)}, 
title={A {PageRank} based recommender system for identifying key classes in software systems}, 
year={2015}, 
pages={495-500}, 
keywords={graph theory;program diagnostics;recommender systems;software maintenance;PageRank;graph ranking algorithm;key classes identification;open source real life systems;recommender system;software evolution;software maintenance;software systems;system static dependencies structure;Computational intelligence;Documentation;Java;Object oriented modeling;Software algorithms;Software systems}, 
doi={10.1109/SACI.2015.7208254}, 
month={May},}




@INPROCEEDINGS{SoraConti, 
author={\c{S}ora, Ioana and Glodean, Gabriel and Gligor, Mihai}, 
booktitle={Computational Cybernetics and Technical Informatics ({ICCC-CONTI}), 2010 International Joint Conference on}, 
title={Software architecture reconstruction: An approach based on combining graph clustering and partitioning}, 
year={2010}, 
month={May}, 
pages={259-264}, 
keywords={Application software;Clustering algorithms;Computer architecture;Documentation;Object oriented modeling;Partitioning algorithms;Software algorithms;Software architecture;Software maintenance;Software systems;clustering;partitioning;software architecture}, 
doi={10.1109/ICCCYB.2010.5491289},}


@article {ZaidmanJurnal,
author = {Zaidman, Andy and Demeyer, Serge},
title = {Automatic identification of key classes in a software system using webmining techniques},
journal = {Journal of Software Maintenance and Evolution: Research and Practice},
volume = {20},
number = {6},
publisher = {John Wiley \& Sons, Ltd.},
issn = {1532-0618},
pages = {387--417},
keywords = {program comprehension, dynamic analysis, webmining, coupling},
year = {2008},
}



@inproceedings{Gueheneuc,
 author = {Gu{\'e}h{\'e}neuc, Yann-Ga\"{e}l},
 title = {A Reverse Engineering Tool for Precise Class Diagrams},
 booktitle = {Proceedings of the 2004 Conference of the Centre for Advanced Studies on Collaborative Research},
 series = {CASCON '04},
 year = {2004},
 location = {Markham, Ontario, Canada},
 pages = {28--41},
 numpages = {14},
  publisher = {IBM Press},
} 


@INPROCEEDINGS{1199197, 
author={M. L. Collard and H. H. Kagdi and J. I. Maletic}, 
booktitle={11th IEEE International Workshop on Program Comprehension, 2003.}, 
title={An {XML}-based lightweight {C++} fact extractor}, 
year={2003}, 
volume={}, 
number={}, 
pages={134-143}, 
keywords={C++ language;XML;grammars;reverse engineering;software maintenance;software tools;XML representation;XML tools;XPath;XSLT;incomplete source code;lightweight C++ fact extractor;maintenance;noncompilable source code;partial parsing;program understanding;reverse engineering;software engineering;source code programs;srcML;Computer science;Data mining;Reverse engineering;Robustness;Software engineering;Software systems;Software testing;System testing;White spaces;XML}, 
doi={10.1109/WPC.2003.1199197}, 
ISSN={1092-8138}, 
month={May},}


@inproceedings{2003:XLC:851042.857028,
author = {M. L. Collard and H. H. Kagdi and J. I. Maletic}, 
 title = {An {XML}-Based Lightweight {C++} Fact Extractor},
 booktitle = {Proceedings of the 11th IEEE International Workshop on Program Comprehension},
 series = {IWPC '03},
 year = {2003},
 isbn = {0-7695-1883-4},
 pages = {134--},
 url = {http://dl.acm.org/citation.cfm?id=851042.857028},
 acmid = {857028},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
key = {{$\!\!$}} ,
} 


@inproceedings{Collard:2011:LTF:2067850.2068011,
 author = {Collard, Michael L. and Decker, Michael J. and Maletic, Jonathan I.},
 title = {Lightweight Transformation and Fact Extraction with the {srcML} Toolkit},
 booktitle = {Proceedings of the 2011 IEEE 11th International Working Conference on Source Code Analysis and Manipulation},
 series = {SCAM '11},
 year = {2011},
 isbn = {978-0-7695-4347-5},
 pages = {173--184},
 numpages = {12},
 url = {https://doi.org/10.1109/SCAM.2011.19},
 doi = {10.1109/SCAM.2011.19},
 acmid = {2068011},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {Source Transformation, Fact Extraction, srcML},
} 

@inproceedings{srcMLCollard,
author = {Collard, Michael and Decker, Michael and Maletic, Jonathan},
year = {2013},
month = {09},
pages = {516-519},
title = {srcML: An Infrastructure for the Exploration, Analysis, and Manipulation of Source Code: A Tool Demonstration},
journal = {IEEE International Conference on Software Maintenance, ICSM},
doi = {10.1109/ICSM.2013.85}
}

@article{CollardsrcML2005,
author = {Collard, Michael},
year = {2005},
month = {01},
pages = {},
title = {Addressing source code using srcml}
}

@mastersthesis{mastersthesis,
   author       = {Adelina Diana Stana},
   title        = {An analysis of the relationship between structural and 
logical dependencies in software systems},
   school       = {Politehnica University Timisoara},
   year         = 2018,
   address      = {Romania},
   month        = {June},

}

@Article{Kalliamvakou2016,
author="Kalliamvakou, Eirini
and Gousios, Georgios
and Blincoe, Kelly
and Singer, Leif
and German, Daniel M.
and Damian, Daniela",
title="An in-depth study of the promises and perils of mining GitHub",
journal="Empirical Software Engineering",
year="2016",
month="Oct",
day="01",
volume="21",
number="5",
pages="2035--2071",
abstract="With over 10 million git repositories, GitHub is becoming one of the most important sources of software artifacts on the Internet. Researchers mine the information stored in GitHub's event logs to understand how its users employ the site to collaborate on software, but so far there have been no studies describing the quality and properties of the available GitHub data. We document the results of an empirical study aimed at understanding the characteristics of the repositories and users in GitHub; we see how users take advantage of GitHub's main features and how their activity is tracked on GitHub and related datasets to point out misalignment between the real and mined data. Our results indicate that while GitHub is a rich source of data on software development, mining GitHub for research purposes should take various potential perils into consideration. For example, we show that the majority of the projects are personal and inactive, and that almost 40 {\%} of all pull requests do not appear as merged even though they were. Also, approximately half of GitHub's registered users do not have public activity, while the activity of GitHub users in repositories is not always easy to pinpoint. We use our identified perils to see if they can pose validity threats; we review selected papers from the MSR 2014 Mining Challenge and see if there are potential impacts to consider. We provide a set of recommendations for software engineering researchers on how to approach the data in GitHub.",
issn="1573-7616",
doi="10.1007/s10664-015-9393-5",
url="https://doi.org/10.1007/s10664-015-9393-5"
}

@INPROCEEDINGS{1553643, 
author={Xiaoxia Ren and B. G. Ryder and M. Stoerzer and F. Tip}, 
booktitle={Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.}, 
title={Chianti: a change impact analysis tool for Java programs}, 
year={2005}, 
volume={}, 
number={}, 
pages={664-665}, 
keywords={Java;program debugging;software tools;Java program;change impact analysis tool;debugging technique;eclipse environment;object-oriented program;partial order interdependence;regression test;Algorithm design and analysis;Debugging;Java;Logic programming;Logic testing;Object oriented programming;Programming profession;Software engineering;Software systems;Software testing}, 
doi={10.1109/ICSE.2005.1553643}, 
ISSN={0270-5257}, 
month={May},}

@book{Booch:2004:OAD:975416,
 author = {Booch, Grady},
 title = {Object-Oriented Analysis and Design with Applications (3rd Edition)},
 year = {2004},
 isbn = {020189551X},
 publisher = {Addison Wesley Longman Publishing Co., Inc.},
 address = {Redwood City, CA, USA},
}

@article{Cataldo2009SoftwareDW,
  title={Software Dependencies, Work Dependencies, and Their Impact on Failures},
  author={Marcelo Cataldo and Audris Mockus and Jeffrey A. Roberts and James D. Herbsleb},
  journal={IEEE Transactions on Software Engineering},
  year={2009},
  volume={35},
  pages={864-878}
}

@article{Yu:2007:UCC:1231330.1231370,
 author = {Yu, Liguo},
 title = {Understanding Component Co-evolution with a Study on Linux},
 journal = {Empirical Softw. Engg.},
 volume = {12},
 number = {2},
 month = apr,
 year = {2007},
 issn = {1382-3256},
 pages = {123--141},
 numpages = {19},
 url = {http://dx.doi.org/10.1007/s10664-006-9000-x},
 doi = {10.1007/s10664-006-9000-x},
 acmid = {1231370},
 publisher = {Kluwer Academic Publishers},
 address = {Hingham, MA, USA},
 keywords = {Co-evolution, Coupling, Linux, Software evolution},
} 

@INPROCEEDINGS{dep:generation, 
author={P. {Wang} and J. {Yang} and L. {Tan} and R. {Kroeger} and J. {David Morgenthaler}}, 
booktitle={2013 4th International Workshop on Managing Technical Debt (MTD)}, 
title={Generating precise dependencies for large software}, 
year={2013}, 
volume={}, 
number={}, 
pages={47-50}, 
keywords={C++ language;project management;software engineering;software management;intra-module dependency;inter-module dependency;technical debt;long-term software development;code dependency;large C/C++ software projects;symbol-level dependency;module-level dependency;software system;underutilized dependency;inconsistent dependency;refactoring opportunity;large-scale refactoring tasks;Chromium;Google;Couplings;Libraries;Browsers;Software systems;dependency large scale;technical debt}, 
doi={10.1109/MTD.2013.6608678}, 
ISSN={}, 
month={May},}

@ARTICLE{1702084, 
author={D. H. {Hutchens} and V. R. {Basili}}, 
journal={IEEE Transactions on Software Engineering}, 
title={System Structure Analysis: Clustering with Data Bindings}, 
year={1985}, 
volume={SE-11}, 
number={8}, 
pages={749-757}, 
keywords={Cluster;coupling;data binding;module;measurement;system structure;Data analysis;Computer science;Documentation;Military computing;Proposals;Computerized monitoring;Fluid flow measurement;Stability analysis;Cluster;coupling;data binding;module;measurement;system structure}, 
doi={10.1109/TSE.1985.232524}, 
ISSN={0098-5589}, 
month={Aug},}

@INPROCEEDINGS{341244, 
author={P. K. {Linos} and V. {Courtois}}, 
booktitle={Proceedings 1994 IEEE 3rd Workshop on Program Comprehension- WPC '94}, 
title={A tool for understanding object-oriented program dependencies}, 
year={1994}, 
volume={}, 
number={}, 
pages={20-27}, 
keywords={object-oriented programming;inheritance;software maintenance;systems re-engineering;software tools;C language;object-oriented languages;reverse engineering;object-oriented program dependencies;C++ program re engineering;OO!CARE;Object-Oriented Computer Aided Re Engineering;object oriented program dependencies;data objects;CARE;object-oriented programming paradigm;inheritance;polymorphism;OOP;Visualization;Computer languages;Software tools;Software maintenance;Computer science;Object oriented programming;Visual databases;Taxonomy;Message passing;Industrial relations}, 
doi={10.1109/WPC.1994.341244}, 
ISSN={1092-8138}, 
month={Nov},}

@MISC{Wilde90understandingprogram,
    author = {Norman Wilde},
    title = {Understanding Program Dependencies},
    year = {1990}
}

@inproceedings{Bennett,
author = {H. Bennett, Keith and Rajlich, Vaclav},
year = {2000},
month = {05},
pages = {73-87},
title = {Software Maintenance and Evolution: a Roadmap},
doi = {10.1145/336512.336534}
}

@article{Lientz:1981:PAS:358790.358796,
 author = {Lientz, Bennet P. and Swanson, E. Burton},
 title = {Problems in Application Software Maintenance},
 journal = {Commun. ACM},
 volume = {24},
 number = {11},
 month = nov,
 year = {1981},
 issn = {0001-0782},
 pages = {763--769},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/358790.358796},
 doi = {10.1145/358790.358796},
 acmid = {358796},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {application software maintenance, maintenance problem factors},
} 

@inproceedings{nsbreloaded,
author = {Fraser, Steven and Brooks, Jr, Frederick and Fowler, Martin and Lopez, Ricardo and Namioka, Aki and M. Northrop, Linda and Parnas, David and Thomas, Dave},
year = {2007},
month = {01},
pages = {1026-1030},
title = {"No silver bullet" reloaded: retrospective on "essence and accidents of software engineering".},
doi = {10.1145/1297846.1297973}
}

@article{Brooks:1987:NSB:26440.26441,
 author = {Brooks,Jr., Frederick P.},
 title = {No Silver Bullet Essence and Accidents of Software Engineering},
 journal = {Computer},
 volume = {20},
 number = {4},
 month = apr,
 year = {1987},
 issn = {0018-9162},
 pages = {10--19},
 numpages = {10},
 url = {https://doi.org/10.1109/MC.1987.1663532},
 doi = {10.1109/MC.1987.1663532},
 acmid = {26441},
 publisher = {IEEE Computer Society Press},
 address = {Los Alamitos, CA, USA},
} 

@article{model-bennett,
author = {H. Bennett, K and Le, Dh and Rajlich, Vaclav},
year = {2000},
month = {05},
pages = {},
title = {The staged model of the software lifecycle: A new perspective on software evolution}
}

@article{Software-life-cycle,
author = {Lehner, Franz},
year = {1991},
month = {08},
pages = {603-608},
title = {Software life cycle management based on a phase distinction method},
volume = {32},
journal = {Microprocessing and Microprogramming},
doi = {10.1016/0165-6074(91)90409-M}
}

@ARTICLE{363157, 
author={K. {Bennett}}, 
journal={IEEE Software}, 
title={Legacy systems: coping with success}, 
year={1995}, 
volume={12}, 
number={1}, 
pages={19-23}, 
keywords={data visualisation;reverse engineering;software maintenance;software management;program visualization techniques;program understanding techniques;outside contractors;expense justification;nontechnical challenges;technical challenges;software updating;software migration;outdated techniques;large software systems;legacy systems;Stress;Software maintenance;Degradation;Software systems;Assembly systems;Art;Software engineering;Concurrent computing;Design methodology;Testing}, 
doi={10.1109/52.363157}, 
ISSN={0740-7459}, 
month={Jan},}

@INPROCEEDINGS{810308, 
author={S. S. {Yau} and J. S. {Collofello} and T. {MacGregor}}, 
booktitle={The IEEE Computer Society's Second International Computer Software and Applications Conference, 1978. COMPSAC '78.}, 
title={Ripple effect analysis of software maintenance}, 
year={1978}, 
volume={}, 
number={}, 
pages={60-65}, 
keywords={Software maintenance;Large-scale systems;Costs;Software systems;Documentation;Performance analysis;Personnel;Software performance;Life estimation;Error correction}, 
doi={10.1109/CMPSAC.1978.810308}, 
ISSN={}, 
month={Nov},}

@article{Rajlich,
author = {Rajlich, Vaclav},
year = {2000},
month = {05},
pages = {235-248},
title = {Modeling software evolution by evolving interoperation graphs},
volume = {9},
journal = {Ann. Software Eng.},
doi = {10.1023/A:1018933026438}
}

@article{Bohner,
author = {A. Bohner, S and S. Arnold, R},
year = {1996},
month = {01},
pages = {},
title = {Software Change Impact Analysis},
volume = {1},
journal = {IEEE Computer Society}
}

@article{Bass-archreconstruction,
author = {Bass, L and Clements, P and Kazman, Rick},
year = {2003},
month = {01},
pages = {},
title = {Software Architecture in Practice 2nd Edition}
}

@inproceedings{RecoverySartipi,
author = {Sartipi, Kamran},
year = {2003},
month = {09},
pages = {},
title = {Software Architecture Recovery based on Pattern Matching}
}

@inproceedings{FoSEReverseEngineering ,
author = {Canfora, Gerardo and Di Penta, Massimiliano},
year = {2007},
month = {06},
pages = {326 - 341},
title = {New Frontiers of Reverse Engineering},
isbn = {0-7695-2829-5},
journal = {FoSE 2007: Future of Software Engineering},
doi = {10.1109/FOSE.2007.15}
}

@article{ChikofskyReverse,
author = {Chikofsky, E.J. and , Cross and , II},
year = {1990},
month = {02},
pages = {13-17},
title = {Reverse Engineering and Design Recovery: A Taxonomy},
volume = {7},
journal = {Software, IEEE},
doi = {10.1109/52.43044}
}

@inproceedings{CloneDetection,
author = {Baxter, Ira and Yahin, Andrew and de Moura, Leonardo and Sant'Anna, Marcelo and Bier, Lorraine},
year = {1998},
month = {01},
pages = {368-377},
title = {Clone Detection Using Abstract Syntax Trees.},
volume = {368-377},
journal = {Proc. of International Conference on Software Maintenance},
doi = {10.1109/ICSM.1998.738528}
}

@article{cloneKamiya,
author = {Kamiya, Toshihiro and Kusumoto, Shinji and Inoue, Katsuro},
year = {2002},
month = {08},
pages = {654- 670},
title = {CCFinder: A multilinguistic token-based code clone detection system for large scale source code},
volume = {28},
journal = {Software Engineering, IEEE Transactions on},
doi = {10.1109/TSE.2002.1019480}
}

@inproceedings{ClonesMayrand,
author = {Mayrand, Jean and Leblanc, Claude and M. Merlo, Ettore},
year = {1996},
month = {01},
pages = {244-},
title = {Experiment on the Automatic Detection of Function Clones in a Software System Using Metrics.},
journal = {Conference on Software Maintenance},
doi = {10.1109/ICSM.1996.565012}
}

@inproceedings{clones,
author = {Marcus, Andrian and Maletic, J.I.},
year = {2001},
month = {12},
pages = {107- 114},
title = {Identification of high-level concept clones in source code},
isbn = {0-7695-1426-X},
doi = {10.1109/ASE.2001.989796}
}

@article{articlesmells,
author = {Van Emden, Eva and Moonen, Leon},
year = {2002},
month = {11},
pages = {},
title = {Java Quality Assurance by Detecting Code Smells}
}

@book{bookFowler,
author = {Fowler, Martin and Beck, Kent and Brant, John and Opdyke, William and Roberts, Don},
year = {1999},
month = {01},
pages = {},
title = {Refactoring: Improving the Design of Existing Code}
}

@article{Comprehension,
author = {Rugaber, Spencer},
year = {1997},
month = {08},
pages = {},
title = {Program Comprehension}
}

@article{articleLientz,
author = {Lientz, Bennet and Burton Swanson, E and E. Tompkins, Gerry},
year = {1978},
month = {06},
pages = {466-471},
title = {Characteristics of Application Software Maintenance},
volume = {21},
journal = {Communications of the ACM},
doi = {10.1145/359511.359522}
}

@inproceedings{inproceedingsEmpirical,
author = {Sjøberg, Dag and Dybå, Tore and Jorgensen, Magne},
year = {2007},
month = {06},
pages = {358-378},
title = {The Future of Empirical Methods in Software Engineering Research},
isbn = {0-7695-2829-5},
journal = {FoSE 2007: Future of Software Engineering},
doi = {10.1109/FOSE.2007.30}
}

@inproceedings{fault-localization,
author = {A. Jones, James and Harrold, Mary},
year = {2005},
month = {01},
pages = {273-282},
title = {Empirical evaluation of the Tarantula automatic fault-localization technique},
journal = {20th IEEE/ACM International Conference on Automated Software Engineering, ASE 2005},
doi = {10.1145/1101908.1101949}
}

@inproceedings{program-failures,
author = {Cleve, Holger and Zeller, Andreas},
year = {2005},
month = {06},
pages = {342- 351},
title = {Locating causes of program failures},
isbn = {1-59593-963-2},
journal = {Proceedings - 27th International Conference on Software Engineering, ICSE05},
doi = {10.1109/ICSE.2005.1553577}
}

@article{articleEvolution,
author = {Yang, Hongji and Ward, Martin},
year = {2003},
month = {01},
pages = {},
title = {Successful Evolution of Software Systems}
}

@ARTICLE{67595, 
author={R. W. {Selby} and V. R. {Basili}}, 
journal={IEEE Transactions on Software Engineering}, 
title={Analyzing error-prone system structure}, 
year={1991}, 
volume={17}, 
number={2}, 
pages={141-152}, 
keywords={error analysis;program diagnostics;software metrics;error-prone system structure;data interaction;data bindings;software systems;prediction environment;empirical analysis;clustering technique;nonparametric analysis of variance model;Error analysis;Software measurement;Software systems;Data analysis;Computer errors;Software testing;System testing;Error correction;Inspection;Computer science}, 
doi={10.1109/32.67595}, 
ISSN={0098-5589}, 
month={Feb},}

@INPROCEEDINGS{6606615, 
author={G. {Bavota} and B. {Dit} and R. {Oliveto} and M. {Di Penta} and D. {Poshyvanyk} and A. {De Lucia}}, 
booktitle={2013 35th International Conference on Software Engineering (ICSE)}, 
title={An empirical study on the developers' perception of software coupling}, 
year={2013}, 
volume={}, 
number={}, 
pages={692-701}, 
keywords={Java;public domain software;software engineering;Unified Modeling Language;developers perception;software coupling;software systems;structural coupling measures;dynamic coupling measures;semantic coupling measures;logical coupling measures;Java open-source systems;ArgoUML;JHotDraw;jEdit;source code vocabulary;Couplings;Semantics;Software;Software measurement;Iterative closest point algorithm;Java;Software Coupling;Empirical Studies}, 
doi={10.1109/ICSE.2013.6606615}, 
ISSN={0270-5257}, 
month={May},}

@ARTICLE{6963448, 
author={F. {Palomba} and G. {Bavota} and M. D. {Penta} and R. {Oliveto} and D. {Poshyvanyk} and A. {De Lucia}}, 
journal={IEEE Transactions on Software Engineering}, 
title={Mining Version Histories for Detecting Code Smells}, 
year={2015}, 
volume={41}, 
number={5}, 
pages={462-489}, 
keywords={data mining;program compilers;public domain software;code smell detection;historical information for smell detection;divergent change;shotgun surgery;parallel inheritance;blob;feature envy;HIST;code analysis;single system snapshot;open source project;mining version history;History;Feature extraction;Surgery;Accuracy;Association rules;Detectors;Code smells;mining software repositories;empirical studies;Code smells;mining software repositories;empirical studies}, 
doi={10.1109/TSE.2014.2372760}, 
ISSN={0098-5589}, 
month={May},}

@INPROCEEDINGS{7471284, 
author={S. {Li} and H. {Tsukiji} and K. {Takano}}, 
booktitle={2016 30th International Conference on Advanced Information Networking and Applications Workshops (WAINA)}, 
title={Analysis of Software Developer Activity on a Distributed Version Control System}, 
year={2016}, 
volume={}, 
number={}, 
pages={701-707}, 
keywords={configuration management;groupware;Web services;software developer activity;distributed version control system;software development project;Web environment;feature extraction;collaborative development;GitHub;Software;Feature extraction;Libraries;Control systems;Computer architecture;Rails;Java;GitHub;collaborative development;distributed version control system;developer;feature extraction}, 
doi={10.1109/WAINA.2016.107}, 
ISSN={}, 
month={March},}

@INPROCEEDINGS{5741260, 
author={M. {Abbes} and F. {Khomh} and Y. {Gueheneuc} and G. {Antoniol}}, 
booktitle={2011 15th European Conference on Software Maintenance and Reengineering}, 
title={An Empirical Study of the Impact of Two Antipatterns, Blob and Spaghetti Code, on Program Comprehension}, 
year={2011}, 
volume={}, 
number={}, 
pages={181-190}, 
keywords={object-oriented programming;software maintenance;antipatterns;blob;spaghetti code;program comprehension;recurring design problems;object-oriented systems;maintenance tasks;NASA task load index;Maintenance engineering;Programming;Analysis of variance;Java;Indexes;NASA;Time measurement;Antipatterns;Blob;Spaghetti Code;Program Comprehension;Program Maintenance;Empirical Software Engineering}, 
doi={10.1109/CSMR.2011.24}, 
ISSN={1534-5351}, 
month={March},}

@INPROCEEDINGS{5328703, 
author={F. {Khomh} and M. {Di Penta} and Y. {Gueheneuc}}, 
booktitle={2009 16th Working Conference on Reverse Engineering}, 
title={An Exploratory Study of the Impact of Code Smells on Software Change-proneness}, 
year={2009}, 
volume={}, 
number={}, 
pages={75-84}, 
keywords={data mining;object-oriented programming;program diagnostics;program testing;quality assurance;software maintenance;software quality;statistical testing;class code smell detection;software change-proneness;object-oriented system;hypothesis testing;Azureus;Eclipse;code smell specification;quality assurance;testing activity;software repository mining;empirical software engineering;object-oriented software evolution;design pattern;software refactoring;Testing;Quality assurance;Reverse engineering;Software engineering;Personnel;Quality management;Code Smells;Mining Software Repositories;Empirical Software Engineering}, 
doi={10.1109/WCRE.2009.28}, 
ISSN={1095-1350}, 
month={Oct},}

@article{articlefault-proneness,
author = {Khomh, Foutse and Di Penta, Massimiliano and Guéhéneuc, Yann-Gaël and Antoniol, Giuliano},
year = {2012},
month = {06},
pages = {243-275},
title = {An exploratory study of the impact of antipatterns on class change- and fault-proneness},
volume = {17},
journal = {Empirical Software Engineering},
doi = {10.1007/s10664-011-9171-y}
}

@article{article-cognitive-processes,
author = {E. Brooks, Ruven},
year = {1999},
month = {08},
pages = {197-211},
title = {Towards a theory of the cognitive processes in computer programming},
volume = {51},
journal = {Int. J. Hum.-Comput. Stud.},
doi = {10.1006/ijhc.1977.0306}
}

@article{articleDebugging,
author = {Vessey, Iris},
year = {1984},
month = {12},
pages = {},
title = {Expertise in Debugging Computer Programs}
}

@ARTICLE{1702015, 
author={V. Y. {Shen} and {Tze-jie Yu} and S. M. {Thebaut} and L. R. {Paulsen}}, 
journal={IEEE Transactions on Software Engineering}, 
title={Identifying Error-Prone Software—An Empirical Study}, 
year={1985}, 
volume={SE-11}, 
number={4}, 
pages={317-324}, 
keywords={Defect density;error-prone modules;probability of errors;program testing;software errors;software metrics;Error correction;Software testing;Software measurement;Costs;Software systems;Laboratories;Performance evaluation;System testing;History;Software metrics;Defect density;error-prone modules;probability of errors;program testing;software errors;software metrics}, 
doi={10.1109/TSE.1985.232222}, 
ISSN={0098-5589}, 
month={April},}

@INPROCEEDINGS{DepSACI, 
author="{{Stana} Adelina and {\c{S}ora} Ioana}", 
booktitle={International Symposium on Applied Computational Intelligence and Informatics (SACI)}, 
title={Analyzing information from versioning systems to detect logical dependencies in software systems}, 
year={2019}, 
month={May},}

@article{Finding-key-classes,
title = {Finding key classes in object-oriented software systems by techniques based on static analysis},
journal = {Information and Software Technology},
volume = {116},
pages = {106176},
year = {2019},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2019.106176},
url = {https://www.sciencedirect.com/science/article/pii/S0950584919301727},
author = {Ioana Şora and Ciprian-Bogdan Chirila},
keywords = {Key classes, Program comprehension, Static analysis},
abstract = {Context
Software maintenance is burdened by program comprehension activities which consume a big part of project resources. Program comprehension is difficult because the code to be analyzed is very large and the documentation may not be well structured to help navigating through the code.
Objective
Tools should support the early stages of program comprehension. Our goal is to build tools that analyze the code and filter this large amount of information such that only the most important information is presented to the software maintenance team. In the case of object-oriented systems, finding the important information means finding the most important classes, also called the key classes of the system.
Method
In this work, we formulate and explore several hypotheses regarding which are the class attributes that characterize important classes. By class attributes, we understand here different metrics that quantify properties of the class such as its connections and relationships with other classes. All the necessary input data for computing class attributes are extracted from code by static analysis. We experimentally investigate which attributes are best suited to rank classes according to their importance, doing an extensive empirical study on fifteen software systems.
Result
Attributes from the categories of direct connections and network centrality are the best for finding key classes. We identified three class attributes which are best as class ranking criteria: PR-U2-W and CONN-TOTAL-W when the target set of key classes is small and CONN-TOTAL when the target set has a large and variable size. We show that the method of ranking classes based on these attributes outperforms known related work approaches of finding key classes.
Conclusions
Our method allows us to build easy-to-use fully automatic tools which find almost instantly the key classes of a software system starting from its code.}
}

@article{Meyer2014IdentifyingIC,
  title={Identifying Important Classes of Large Software Systems through k-Core Decomposition},
  author={P. Meyer and H. Siy and S. Bhowmick},
  journal={Adv. Complex Syst.},
  year={2014},
  volume={17}
}

@INPROCEEDINGS{CentralClassesSteidl,
  author={D. {Steidl} and B. {Hummel} and E. {Juergens}},
  booktitle={2012 19th Working Conference on Reverse Engineering}, 
  title={Using Network Analysis for Recommendation of Central Software Classes}, 
  year={2012},
  volume={},
  number={},
  pages={93-102},
  doi={10.1109/WCRE.2012.19}}

@article{Tahvildari2004ImprovingDQ,
  title={Improving design quality using meta-pattern transformations: a metric-based approach},
  author={L. Tahvildari and K. Kontogiannis},
  journal={J. Softw. Maintenance Res. Pract.},
  year={2004},
  volume={16},
  pages={331-361}
}

@conference{enase15,
author={Ioana Şora.},
title={Finding the Right Needles in Hay - Helping Program Comprehension of Large Software Systems},
booktitle={Proceedings of the 10th International Conference on Evaluation of Novel Approaches to Software Engineering - Volume 1: ENASE,},
year={2015},
pages={129-140},
publisher={SciTePress},
organization={INSTICC},
doi={10.5220/0005465901290140},
isbn={978-989-758-100-7},
}

@techreport{ilprints422,
          number = {1999-66},
           month = {November},
          author = {Lawrence Page and Sergey Brin and Rajeev Motwani and Terry Winograd},
            note = {Previous number = SIDL-WP-1999-0120},
           title = {The PageRank Citation Ranking: Bringing Order to the Web.},
            type = {Technical Report},
       publisher = {Stanford InfoLab},
            year = {1999},
     institution = {Stanford InfoLab},
             url = {http://ilpubs.stanford.edu:8090/422/},
        abstract = {The importance of a Web page is an inherently subjective matter, which depends on the readers interests, knowledge and attitudes. But there is still much that can be said objectively about the relative importance of Web pages. This paper describes PageRank, a mathod for rating Web pages objectively and mechanically, effectively measuring the human interest and attention devoted to them. We compare PageRank to an idealized random Web surfer. We show how to efficiently compute PageRank for large numbers of pages. And, we show how to apply PageRank to search and to user navigation.}
}

@article{Ding2016AnIA,
  title={An Improved Approach to Identifying Key Classes in Weighted Software Network},
  author={Yi Ding and B. Li and Peng He},
  journal={Mathematical Problems in Engineering},
  year={2016},
  volume={2016},
  pages={1-9}
}

@article{PAN2018188,
title = {Identifying key classes in object-oriented software using generalized k-core decomposition},
journal = {Future Generation Computer Systems},
volume = {81},
pages = {188-202},
year = {2018},
issn = {0167-739X},
doi = {https://doi.org/10.1016/j.future.2017.10.006},
url = {https://www.sciencedirect.com/science/article/pii/S0167739X17302492},
author = {Weifeng Pan and Beibei Song and Kangshun Li and Kejun Zhang},
keywords = {Key classes, Generalized -core decomposition, Complex network, Program comprehension, Static analysis},
abstract = {Identifying key classes can help developers familiarize with a previously unknown software system. Complex network research opens new opportunities for identifying key classes, and many approaches have been proposed. However, the software network that existing approaches rely on is un-weighted and un-directed, which does not conform to the reality of a software system. Thus, how to identify key classes by using more accurate software network models and appropriate complex network theories is still a problem that has never been reported. The objective of this paper is to provide a ranked list of classes for new developers as starting points for the program comprehension process. Our approach is based on a more accurate software network and a generalized version of k-core decomposition in complex network research. First, we use a weighted directed software network to represent the topological structure of software at the class level, which takes into consideration both the coupling direction and coupling strength. Then, we propose a generalized k-core decomposition method and use it to calculate the generalized coreness of each class. Finally, we sort classes with respect to their generalized corenesses in a descending order. The top-ranked classes serve as the key class candidates. Experiments have been performed on four open-source software systems. }
}

@INPROCEEDINGS{7332515,
  author={L. {do Nascimento Vale} and M. {de A. Maia}},
  booktitle={2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Keecle: Mining key architecturally relevant classes using dynamic analysis}, 
  year={2015},
  volume={},
  number={},
  pages={566-570},
  doi={10.1109/ICSM.2015.7332515}}


  @INPROCEEDINGS{1402122,
  author={A. {Zaidman} and T. {Calders} and S. {Demeyer} and J. {Paredaens}},
  booktitle={Ninth European Conference on Software Maintenance and Reengineering}, 
  title={Applying Webmining techniques to execution traces to support the program comprehension process}, 
  year={2005},
  volume={},
  number={},
  pages={134-142},
  doi={10.1109/CSMR.2005.12}}


  @article{Kamran2016IdentificationOC,
  title={Identification of Core Architecture Classes for Object-Oriented Software Systems},
  author={M. Kamran and M. Ali and B. Akbar},
  journal={Journal of Applied Computer Science \& Mathematics},
  year={2016},
  volume={10},
  pages={21-25}
}


@article{ROCIntro,
title = {An introduction to ROC analysis},
journal = {Pattern Recognition Letters},
volume = {27},
number = {8},
pages = {861-874},
year = {2006},
note = {ROC Analysis in Pattern Recognition},
issn = {0167-8655},
doi = {https://doi.org/10.1016/j.patrec.2005.10.010},
url = {https://www.sciencedirect.com/science/article/pii/S016786550500303X},
author = {Tom Fawcett},
keywords = {ROC analysis, Classifier evaluation, Evaluation metrics},
abstract = {Receiver operating characteristics (ROC) graphs are useful for organizing classifiers and visualizing their performance. ROC graphs are commonly used in medical decision making, and in recent years have been used increasingly in machine learning and data mining research. Although ROC graphs are apparently simple, there are some common misconceptions and pitfalls when using them in practice. The purpose of this article is to serve as an introduction to ROC graphs and as a guide for using them in research.}
}

@article{ROCBRADLEY19971145,
title = {The use of the area under the ROC curve in the evaluation of machine learning algorithms},
journal = {Pattern Recognition},
volume = {30},
number = {7},
pages = {1145-1159},
year = {1997},
issn = {0031-3203},
doi = {https://doi.org/10.1016/S0031-3203(96)00142-2},
url = {https://www.sciencedirect.com/science/article/pii/S0031320396001422},
author = {Andrew P. Bradley},
keywords = {The ROC curve, The area under the ROC curve (AUC), Accuracy measures, Cross-validation, Wilcoxon statistic, Standard error},
abstract = {In this paper we investigate the use of the area under the receiver operating characteristic (ROC) curve (AUC) as a performance measure for machine learning algorithms. As a case study we evaluate six machine learning algorithms (C4.5, Multiscale Classifier, Perceptron, Multi-layer Perceptron, k-Nearest Neighbours, and a Quadratic Discriminant Function) on six “real world” medical diagnostics data sets. We compare and discuss the use of AUC to the more conventional overall accuracy and find that AUC exhibits a number of desirable properties when compared to overall accuracy: increased sensitivity in Analysis of Variance (ANOVA) tests; a standard error that decreased as both AUC and the number of test samples increased; decision threshold independent; and it is invariant to a priori class probabilities. The paper concludes with the recommendation that AUC be used in preference to overall accuracy for “single number” evaluation of machine learning algorithms.}
}

@INPROCEEDINGS{6676885,
  author={M. H. {Osman} and M. R. V. {Chaudron} and P. v. d. {Putten}},
  booktitle={2013 IEEE International Conference on Software Maintenance}, 
  title={An Analysis of Machine Learning Algorithms for Condensing Reverse Engineered Class Diagrams}, 
  year={2013},
  volume={},
  number={},
  pages={140-149},
  doi={10.1109/ICSM.2013.25}}


@inproceedings{rocclasification,
author = {Thung, Ferdian and Lo, David and Osman, Mohd Hafeez and Chaudron, Michel R. V.},
title = {Condensing Class Diagrams by Analyzing Design and Network Metrics Using Optimistic Classification},
year = {2014},
isbn = {9781450328791},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2597008.2597157},
doi = {10.1145/2597008.2597157},
abstract = { A class diagram of a software system enhances our ability to understand software design. However, this diagram is often unavailable. Developers usually reconstruct the diagram by reverse engineering it from source code. Unfortunately, the resultant diagram is often very cluttered; making it difficult to learn anything valuable from it. Thus, it would be very beneficial if we are able to condense the reverse- engineered class diagram to contain only the important classes depicting the overall design of a software system. Such diagram would make program understanding much easier. A class can be important, for example, if its removal would break many connections between classes. In our work, we estimate this kind of importance by using design (e.g., number of attributes, number of dependencies, etc.) and network metrics (e.g., betweenness centrality, closeness centrality, etc.). We use these metrics as features and input their values to our optimistic classifier that will predict if a class is important or not. Different from standard classification, our newly proposed optimistic classification technique deals with data scarcity problem by optimistically assigning labels to some of the unlabeled data and use them for training a better statistical model. We have evaluated our approach to condense reverse-engineered diagrams of 9 software systems and compared our approach with the state-of-the-art work of Osman et al. Our experiments show that our approach can achieve an average Area Under the Receiver Operating Characteristic Curve (AUC) score of 0.825, which is a 9.1% improvement compared to the state-of-the-art approach. },
booktitle = {Proceedings of the 22nd International Conference on Program Comprehension},
pages = {110–121},
numpages = {12},
keywords = {Important Classes, Network Metrics, Design Metrics, Optimistic Classification},
location = {Hyderabad, India},
series = {ICPC 2014}
}

@INPROCEEDINGS{7551990,
  author={X. {Yang} and D. {Lo} and X. {Xia} and J. {Sun}},
  booktitle={2016 IEEE 40th Annual Computer Software and Applications Conference (COMPSAC)}, 
  title={Condensing Class Diagrams With Minimal Manual Labeling Cost}, 
  year={2016},
  volume={1},
  number={},
  pages={22-31},
  doi={10.1109/COMPSAC.2016.83}}


  @INPROCEEDINGS{5507329,
  author={A. {Mubarak} and S. {Counsell} and R. M. {Hierons}},
  booktitle={2010 Fourth International Conference on Research Challenges in Information Science (RCIS)}, 
  title={An evolutionary study of fan-in and fan-out metrics in OSS}, 
  year={2010},
  volume={},
  number={},
  pages={473-482},
  doi={10.1109/RCIS.2010.5507329}}


@electronic{srcML,
  title = {srcML; www.srcml.org},
  url = {https://www.srcml.org/},
  urldate = {2021-21-01}
}

@inproceedings{b2,
  author    = {S. Mancoridis and B. Mitchell and C. Rorres and Y. Chen and E. Gansner},
  title     = {Using automatic clustering to produce high-level system organizations of source code},
  booktitle = {Proceedings of the 6th International Workshop on Program Comprehension (IWPC'98)},
  year      = {1998},
  pages     = {45--52},
  doi       = {10.1109/WPC.1998.693283},
}

@inproceedings{acdc,
  author    = {V. Tzerpos and R. C. Holt},
  title     = {ACCD: an algorithm for comprehension-driven clustering},
  booktitle = {Proceedings of the Seventh Working Conference on Reverse Engineering},
  year      = {2000},
  pages     = {258--267},
  doi       = {10.1109/WCRE.2000.891477},
}

@inproceedings{b3,
  author    = {V. Tzerpos and R. C. Holt},
  title     = {MoJo: a distance metric for software clusterings},
  booktitle = {Proceedings of the Sixth Working Conference on Reverse Engineering},
  year      = {1999},
  pages     = {187--193},
  doi       = {10.1109/WCRE.1999.806959},
}

@article{tzerpos1,
  author    = {P. Andritsos and V. Tzerpos},
  title     = {Information-theoretic software clustering},
  journal   = {IEEE Transactions on Software Engineering},
  volume    = {31},
  number    = {2},
  pages     = {150--165},
  year      = {2005},
  month     = feb,
  doi       = {10.1109/TSE.2005.25},
}

@inproceedings{mojofm,
  author    = {Zhihua Wen and V. Tzerpos},
  title     = {An effectiveness measure for software clustering algorithms},
  booktitle = {Proceedings of the 12th IEEE International Workshop on Program Comprehension},
  year      = {2004},
  pages     = {194--203},
  doi       = {10.1109/WPC.2004.1311061},
}

@article{b4,
  author    = {Adelina-Diana Stana and Ioana Şora},
  title     = {Logical dependencies: Extraction from the versioning system and usage in key classes detection},
  journal   = {Computer Science and Information Systems},
  volume    = {20},
  pages     = {25--25},
  year      = {2023},
  doi       = {10.2298/CSIS220518025S},
}

@inbook{ROC_METRIC_VALS,
author = {David W. Hosmer, Stanley Lemeshow},
publisher = {John Wiley and Sons, Ltd},
isbn = {9780471722144},
title = {Assessing the Fit of the Model},
booktitle = {Applied Logistic Regression},
chapter = {5},
pages = {143-202},
doi = {https://doi.org/10.1002/0471722146.ch5},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/0471722146.ch5},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/0471722146.ch5},
year = {2000},
keywords = {goodness-of-fit, covariate pattern, m-symptotics},
abstract = {Summary Introduction Summary Measures of Goodness-of-Fit Logistic Regression Diagnostics Assessment of Fit via External Validation Interpretation and Presentation of the Results from a Fitted Logistic Regression Model Exercises}
}


@article{cluster-access,
  author    = {Adelina-Diana Stana and Ioana Şora},
  title     = {Refining Software
Clustering: The Impact of Code Co-Changes on Architectural Reconstruction.},
  journal   = {Access},
  volume    = {20},
  pages     = {25--25},
  year      = {2025},
  doi       = {10.2298/CSIS220518025S},
}

@article{b8,
  author    = {Vincent Blondel and Jean-Loup Guillaume and Renaud Lambiotte and Etienne Lefebvre},
  title     = {Fast Unfolding of Communities in Large Networks},
  journal   = {Journal of Statistical Mechanics: Theory and Experiment},
  year      = {2008},
  doi       = {10.1088/1742-5468/2008/10/P10008},
}

@inproceedings{maletic,
  author    = {J. I. Maletic and A. Marcus},
  title     = {Supporting program comprehension using semantic (lexical) and structural information},
  booktitle = {Proceedings of the 23rd International Conference on Software Engineering (ICSE 2001)},
  year      = {2001},
  pages     = {103--112},
  doi       = {10.1109/ICSE.2001.919085},
}

@article{b9,
  author    = {Andrea Lancichinetti and Santo Fortunato},
  title     = {Community Detection Algorithms: A Comparative Analysis},
  journal   = {Physical Review E, Statistical, Nonlinear, and Soft Matter Physics},
  volume    = {80},
  number    = {5},
  year      = {2009},
  doi       = {10.1103/PhysRevE.80.056117},
}

@article{leiden,
  author    = {V. Traag and L. Waltman and Nees Jan van Eck},
  title     = {From Louvain to Leiden: guaranteeing well-connected communities},
  journal   = {Scientific Reports},
  volume    = {9},
  pages     = {5233},
  year      = {2019},
  doi       = {10.1038/s41598-019-41695-z},
}

@inproceedings{b10,
  author    = {S. Mancoridis and B. S. Mitchell and Y. Chen and E. R. Gansner},
  title     = {Bunch: a clustering tool for the recovery and maintenance of software system structures},
  booktitle = {Proceedings of the IEEE International Conference on Software Maintenance (ICSM'99)},
  year      = {1999},
  pages     = {50--59},
  doi       = {10.1109/ICSM.1999.792498},
}

@inproceedings{wu,
  author    = {Wu, A. E. Hassan and R. C. Holt},
  title     = {Comparison of clustering algorithms in the context of software evolution},
  booktitle = {Proceedings of the 21st IEEE International Conference on Software Maintenance (ICSM'05)},
  year      = {2005},
  pages     = {525--535},
  doi       = {10.1109/ICSM.2005.31},
}

@article{bunch,
  author    = {B. S. Mitchell and S. Mancoridis},
  title     = {On the automatic modularization of software systems using the Bunch tool},
  journal   = {IEEE Transactions on Software Engineering},
  volume    = {32},
  number    = {3},
  pages     = {193--208},
  year      = {2006},
  month     = mar,
  doi       = {10.1109/TSE.2006.31},
}

@inproceedings{dbscan,
  author    = {Martin Ester and Hans-Peter Kriegel and Jörg Sander and Xiaowei Xu},
  title     = {A density-based algorithm for discovering clusters in large spatial databases with noise},
  booktitle = {Proceedings of the Second International Conference on Knowledge Discovery and Data Mining (KDD'96)},
  year      = {1996},
  pages     = {226--231},
}

@inproceedings{corazza2,
  author    = {Anna Corazza and Sergio Di Martino and Giuseppe Scanniello},
  title     = {A Probabilistic Based Approach towards Software System Clustering},
  booktitle = {15th European Conference on Software Maintenance and Reengineering (CSMR)},
  year      = {2010},
  pages     = {88--96},
  doi       = {10.1109/CSMR.2010.36},
}

@article{b14,
  author    = {Nicolas Anquetil and Timothy Lethbridge},
  title     = {File Clustering Using Naming Conventions for Legacy Systems},
  journal   = {Proceedings of the Second Working Conference on Reverse Engineering},
  year      = {1998},
  doi       = {10.1145/782010.782012},
}

@inproceedings{b15,
  author    = {Gustavo Oliva and Marco Aurelio Gerosa},
  title     = {A Method for the Identification of Logical Dependencies},
  booktitle = {Proceedings of the 7th International Conference on Global Software Engineering (ICGSEW)},
  year      = {2012},
  pages     = {70--72},
  doi       = {10.1109/ICGSEW.2012.19},
}

@article{b16,
  author    = {Luciana Silva and Marco Valente and Marcelo Maia},
  title     = {Co-change Clusters: Extraction and Application on Assessing Software Modularity},
  journal   = {Transactions on Aspect-Oriented Software Development},
  year      = {2015},
  doi       = {10.1007/978-3-662-46734-3_3},
}

@article{b17,
  author    = {Fionn Murtagh and Pedro Contreras},
  title     = {Algorithms for hierarchical clustering: An overview},
  journal   = {Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery},
  volume    = {2},
  number    = {2},
  pages     = {86--97},
  year      = {2012},
  doi       = {10.1002/widm.53},
}

@article{b18,
  author    = {Amarjeet Prajapati and Anshu Parashar and Amit Rathee},
  title     = {Multi-dimensional information-driven many-objective software remodularization approach},
  journal   = {Frontiers of Computer Science in China},
  volume    = {17},
  number    = {3},
  pages     = {173209},
  year      = {2023},
}

@article{scikit,
  author    = {T. Bonald and N. de Lara and Q. Lutz and B. Charpentier},
  title     = {Scikit-network: Graph Analysis in Python},
  journal   = {Journal of Machine Learning Research},
  volume    = {21},
  number    = {185},
  pages     = {1--6},
  year      = {2020},
}


@inproceedings{icstcc-2024,
author = {Stana, Adelina-Diana and Şora, Ioana},
year = {2024},
month = {10},
pages = {113-118},
title = {Integrating Logical Dependencies in Software Clustering: A case study on Apache Ant},
doi = {10.1109/ICSTCC62912.2024.10744671}
}

@article{dep-package,
author = {Tang, Guang-yi and Xuan, Hong-wei},
year = {2012},
month = {09},
pages = {},
title = {Research on Measurement of Software Package Dependency based on Component},
volume = {7},
journal = {Journal of Software},
doi = {10.4304/jsw.7.9.2091-2098}
}

@article{dep-external,
author = {Ganesan, Dharmalingam},
year = {2014},
month = {03},
pages = {},
title = {ADAM: External Dependency-Driven Architecture Discovery and Analysis of Quality Attributes},
volume = {23},
journal = {ACM Transactions on Software Engineering and Methodology (TOSEM)},
doi = {10.1145/2529998}
}


@INPROCEEDINGS{lexical-dep,
  author={Corazza, Anna and Di Martino, Sergio and Maggio, Valerio and Scanniello, Giuseppe},
  booktitle={2011 15th European Conference on Software Maintenance and Reengineering}, 
  title={Investigating the use of lexical information for software system clustering}, 
  year={2011},
  volume={},
  number={},
  pages={35-44},
  keywords={Software systems;Clustering algorithms;Software algorithms;Partitioning algorithms;Java;Probabilistic logic;Software Remodularization;Clustering;Lexical Information;Probabilistic Model},
  doi={10.1109/CSMR.2011.8}}

@article{lexical-dep-Prajapati,
author = {Prajapati, Amarjeet and Chhabra, Jitender},
year = {2016},
month = {10},
pages = {},
title = {Improving Modular Structure of Software System using Structural and Lexical Dependency},
volume = {82},
journal = {Information and Software Technology},
doi = {10.1016/j.infsof.2016.09.011}
}

@article{Capiluppi-semantic-dep,
author = {Sas, Cezar and Capiluppi, Andrea},
year = {2021},
month = {02},
pages = {},
title = {Using Structural and Semantic Information to Identify Software Components},
doi = {10.48550/arXiv.2102.04710}
}

@inproceedings{Neto-semantic-dep,
author = {Neto, Alberto Costa and de Medeiros Ribeiro, Marcio and Dosea, Marcos and Bonifacio, Rodrigo and Borba, Paulo},
title = {Semantic Dependencies and Modularity of Aspect-Oriented Software},
year = {2007},
isbn = {0769528309},
publisher = {IEEE Computer Society},
address = {USA},
booktitle = {Proceedings of the 29th International Conference on Software Engineering Workshops},
pages = {171},
series = {ICSEW '07}
}

@ARTICLE{Podgurski-semantic,
  author={Podgurski, A. and Clarke, L.A.},
  journal={IEEE Transactions on Software Engineering}, 
  title={A formal model of program dependences and its implications for software testing, debugging, and maintenance}, 
  year={1990},
  volume={16},
  number={9},
  pages={965-979},
  keywords={Software testing;Sufficient conditions;Fault detection;Software debugging;Software maintenance;Programming;Laboratories;Information science;Data analysis;Computer security},
  doi={10.1109/32.58784}}


@manual{git,
  title        = {Git Documentation},
  author       = {{Git Contributors}},
  year         = {2024},
  url          = {https://git-scm.com/docs}
}

@misc{github,
  title        = {GitHub},
  author       = {{GitHub, Inc.}},
  year         = {2024},
  url          = {https://github.com}
}

@INPROCEEDINGS{clones-ml,
  author={Sheneamer, Abdullah and Hazazi, Hanan and Roy, Swarup and Kalita, Jugal},
  booktitle={2017 16th IEEE International Conference on Machine Learning and Applications (ICMLA)}, 
  title={Schemes for Labeling Semantic Code Clones using Machine Learning}, 
  year={2017},
  volume={},
  number={},
  pages={981-985},
  keywords={Cloning;Labeling;Java;Semantics;Feature extraction;Syntactics;Mathematical model;Machine Learning;Code Clones;Semantic Clones;AST;PDG;Features;Classification},
  doi={10.1109/ICMLA.2017.00-25}}


  @INPROCEEDINGS{clones-nicad,
  author={Cordy, James R. and Roy, Chanchal K.},
  booktitle={2011 IEEE 19th International Conference on Program Comprehension}, 
  title={The NiCad Clone Detector}, 
  year={2011},
  volume={},
  number={},
  pages={219-220},
  keywords={Cloning;Java;Detectors;Syntactics;Linux;HTML;Web pages;tools;clone detection;NiCad;plugin architecture},
  doi={10.1109/ICPC.2011.26}}

@INPROCEEDINGS{clones-nicad-git,
  author={Rahman, Md Saidur and Roy, Chanchal K.},
  booktitle={2017 IEEE 17th International Working Conference on Source Code Analysis and Manipulation (SCAM)}, 
  title={On the Relationships Between Stability and Bug-Proneness of Code Clones: An Empirical Study}, 
  year={2017},
  volume={},
  number={},
  pages={131-140},
  keywords={Cloning;Software systems;Computer bugs;Taxonomy;Stability criteria;Syntactics;Code Clones;Clone Stability;Bug-proneness of Clones},
  doi={10.1109/SCAM.2017.26}}

  @INPROCEEDINGS{clones-comments,
  author={Blasi, Arianna and Gorla, Alessandra},
  booktitle={2018 IEEE/ACM 26th International Conference on Program Comprehension (ICPC)}, 
  title={RepliComment: Identifying Clones in Code Comments}, 
  year={2018},
  volume={},
  number={},
  pages={320-3203},
  keywords={Code comments;Software quality;Clones;Bad smell},
  doi={}}

@INPROCEEDINGS{code-smell-ml,
  author={Fontana, Francesca Arcelli and Zanoni, Marco and Marino, Alessandro and Mäntylä, Mika V.},
  booktitle={2013 IEEE International Conference on Software Maintenance}, 
  title={Code Smell Detection: Towards a Machine Learning-Based Approach}, 
  year={2013},
  volume={},
  number={},
  pages={396-399},
  keywords={Measurement;Machine learning algorithms;Detectors;Software;Conferences;Labeling;Accuracy;code smells detection;machine learning techniques},
  doi={10.1109/ICSM.2013.56}}


@article{code-smell-ml-palomba,
title = {Machine learning techniques for code smell detection: A systematic literature review and meta-analysis},
journal = {Information and Software Technology},
volume = {108},
pages = {115-138},
year = {2019},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2018.12.009},
url = {https://www.sciencedirect.com/science/article/pii/S0950584918302623},
author = {Muhammad Ilyas Azeem and Fabio Palomba and Lin Shi and Qing Wang},
keywords = {Code smells, Machine learning, Systematic literature review},
abstract = {Background: Code smells indicate suboptimal design or implementation choices in the source code that often lead it to be more change- and fault-prone. Researchers defined dozens of code smell detectors, }
}

@article{PALOMBA20181,
title = {A large-scale empirical study on the lifecycle of code smell co-occurrences},
journal = {Information and Software Technology},
volume = {99},
pages = {1-10},
year = {2018},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2018.02.004},
url = {https://www.sciencedirect.com/science/article/pii/S0950584918300211},
author = {Fabio Palomba and Gabriele Bavota and Massimiliano {Di Penta} and Fausto Fasano and Rocco Oliveto and Andrea {De Lucia}},
keywords = {Code smells co-occurrences, Empirical study, Mining software repositories},
abstract = {Context
Code smells are suboptimal design or implementation choices made by programmers during the development of a software system that possibly lead to low code maintainability and higher maintenance costs.}
}

@INPROCEEDINGS{Marinescu,
  author={Marinescu, R.},
  booktitle={20th IEEE International Conference on Software Maintenance, 2004. Proceedings.}, 
  title={Detection strategies: metrics-based rules for detecting design flaws}, 
  year={2004},
  volume={},
  number={},
  pages={350-359},
  keywords={Software design;Diseases;Software maintenance;Software systems;Large-scale systems;Object oriented modeling;Computer science;Intelligent systems;Maintenance engineering;Design engineering},
  doi={10.1109/ICSM.2004.1357820}}

@inproceedings{Marinescu2,
author = {Marinescu, Radu},
year = {2001},
month = {02},
pages = {173-182},
title = {Detecting design flaws via metrics in object-oriented systems},
isbn = {0-7695-1251-8},
doi = {10.1109/TOOLS.2001.941671}
}

@INPROCEEDINGS{Comprehension-Gupta,
  author={Gupta, Nakshatra and Rajput, Ashutosh and Chimalakonda, Sridhar},
  booktitle={2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)}, 
  title={COSPEX: A Program Comprehension Tool for Novice Programmers}, 
  year={2022},
  volume={},
  number={},
  pages={41-45},
  keywords={Software maintenance;Codes;Video on demand;Documentation;Programming;Maintenance engineering;Data mining;Software and its engineering → Software maintenance tools Documentation Maintaining software},
  doi={10.1145/3510454.3516842}}

  @INPROCEEDINGS{fault-gz,
  author={Campos, José and Riboira, André and Perez, Alexandre and Abreu, Rui},
  booktitle={2012 Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering}, 
  title={GZoltar: an eclipse plug-in for testing and debugging}, 
  year={2012},
  volume={},
  number={},
  pages={378-381},
  keywords={Automatic Debugging;Automatic Testing;Eclipse plug-in;GZoltar;RZoltar},
  doi={10.1145/2351676.2351752}}


  @ARTICLE{fault-versioning,
  author={Wen, Ming and Chen, Junjie and Tian, Yongqiang and Wu, Rongxin and Hao, Dan and Han, Shi and Cheung, Shing-Chi},
  journal={IEEE Transactions on Software Engineering}, 
  title={Historical Spectrum Based Fault Localization}, 
  year={2021},
  volume={47},
  number={11},
  pages={2348-2368},
  keywords={Computer bugs;History;Debugging;Industries;Software;Benchmark testing;Maintenance engineering;Fault localization;version histories;bug-inducing commits},
  doi={10.1109/TSE.2019.2948158}}

  @ARTICLE{fault-survey,
  author={Wong, W. Eric and Gao, Ruizhi and Li, Yihao and Abreu, Rui and Wotawa, Franz},
  journal={IEEE Transactions on Software Engineering}, 
  title={A Survey on Software Fault Localization}, 
  year={2016},
  volume={42},
  number={8},
  pages={707-740},
  keywords={Debugging;Software engineering;Computer bugs;Software debugging;Fault diagnosis;Complexity theory;Software fault localization;program debugging;software testing;execution trace;suspicious code;survey},
  doi={10.1109/TSE.2016.2521368}}


  @INPROCEEDINGS{error-prone,
  author={Sohn, Jeongju},
  booktitle={2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)}, 
  title={Bridging Fault Localisation and Defect Prediction}, 
  year={2020},
  volume={},
  number={},
  pages={214-217},
  keywords={Measurement;Software engineering;Software;Predictive models;Software testing;Software maintenance;Fault diagnosis;Fault Localisation;Defect Prediction;SBSE},
  doi={}}


  @INPROCEEDINGS{HistoRank,
  author={Mondal, Manishankar and Roy, Banani and Roy, Chanchal K. and Schneider, Kevin A.},
  booktitle={2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
  title={HistoRank: History-Based Ranking of Co-change Candidates}, 
  year={2020},
  volume={},
  number={},
  pages={240-250},
  keywords={Couplings;Conferences;Programming;Maintenance engineering;Software systems;History;Evolutionary Coupling;Association Rules;Co-change Candidates;Ranking},
  doi={10.1109/SANER48275.2020.9054869}}

@inproceedings{inproceedings-gall,
author = {Ratzinger, Jacek and Fischer, Michael and Gall, Harald},
year = {2005},
month = {07},
pages = {},
title = {Improving evolvability through refactoring},
volume = {30},
journal = {ACM Sigsoft Software Engineering Notes},
doi = {10.1145/1083142.1083155}
}

@INPROCEEDINGS{Coupling-Lanza,
  author={D'Ambros, Marco and Lanza, Michele},
  booktitle={2006 13th Working Conference on Reverse Engineering}, 
  title={Reverse Engineering with Logical Coupling}, 
  year={2006},
  volume={},
  number={},
  pages={189-198},
  keywords={Reverse engineering;Software systems;Visualization;Informatics;Open source software;Packaging;Optical coupling;Radar detection;History;Software packages},
  doi={10.1109/WCRE.2006.51}}

  @INPROCEEDINGS{LD-module-new,
  author={Hanakawa, Noriko},
  booktitle={14th Asia-Pacific Software Engineering Conference (APSEC'07)}, 
  title={Visualization for Software Evolution Based on Logical Coupling and Module Coupling}, 
  year={2007},
  volume={},
  number={},
  pages={214-221},
  keywords={Visualization;Open source software;Software design;Software maintenance;Large-scale systems;Software engineering;Software measurement;Computer bugs;Lab-on-a-chip;Software quality},
  doi={10.1109/ASPEC.2007.36}}


@article{article-Moonen,
author = {Moonen, Leon and Rolfsnes, Thomas and Binkley, Dave and Di Alesio, Stefano},
year = {2018},
month = {08},
pages = {},
title = {What are the effects of history length and age on mining software change impact?},
volume = {23},
journal = {Empirical Software Engineering},
doi = {10.1007/s10664-017-9588-z}
}


@article{article-Kagdi-commit,
author = {Kagdi, Huzefa and Gethers, Malcom and Poshyvanyk, Denys},
year = {2012},
month = {10},
pages = {},
title = {Integrating conceptual and logical couplings for change impact analysis in software},
volume = {18},
journal = {Empirical Software Engineering},
doi = {10.1007/s10664-012-9233-9}
}


@INPROCEEDINGS{Moonen-commit,
  author={Moonen, Leon and Di Alesio, Stefano and Binkley, David and Rolfsnes, Thomas},
  booktitle={2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
  title={Practical guidelines for change recommendation using association rule mining}, 
  year={2016},
  volume={},
  number={},
  pages={732-743},
  keywords={Couplings;History;Data mining;Software;Algorithm design and analysis;Guidelines;Size measurement;Evolutionary coupling;association rule mining;parameter tuning;change recommendations;change impact analysis},
  doi={}}


@inproceedings{msr-kagdi,
author = {Kagdi, Huzefa and Yusuf, Shehnaaz and Maletic, Jonathan I.},
title = {Mining sequences of changed-files from version histories},
year = {2006},
isbn = {1595933972},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1137983.1137996},
doi = {10.1145/1137983.1137996},
abstract = {Modern source-control systems, such as Subversion, preserve change-sets of files as atomic commits. However, the specific ordering information in which files were changed is typically not found in these source-code repositories. In this paper, a set of heuristics for grouping change-sets (i.e., log-entries) found in source-code repositories is presented. Given such groups of change-sets, sequences of files that frequently change together are uncovered. This approach not only gives the (unordered) sets of files but supplements them with (partial temporal) ordering information. The technique is demonstrated on a subset of KDE source-code repository. The results show that the approach is able to find sequences of changed-files.},
booktitle = {Proceedings of the 2006 International Workshop on Mining Software Repositories},
pages = {47–53},
numpages = {7},
keywords = {mining software repositories, heuristics, change sequences},
location = {Shanghai, China},
series = {MSR '06}
}

@INPROCEEDINGS{Mandal-clones,
  author={Mandal, Manishankar and Roy, Chanchal K. and Schneider, Kevin A.},
  booktitle={2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)}, 
  title={Automatic ranking of clones for refactoring through mining association rules}, 
  year={2014},
  volume={},
  number={},
  pages={114-123},
  keywords={Cloning;Association rules;Prototypes;History;Software systems;Maintenance engineering;Clone Change Pattern;Association Rule;Clone Class;Clone Refactoring},
  doi={10.1109/CSMR-WCRE.2014.6747161}}

  @INPROCEEDINGS{buggy-code,
  author={Tantithamthavorn, Chakkrit and Ihara, Akinori and Matsumoto, Ken-Ichi},
  booktitle={2013 14th ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing}, 
  title={Using Co-change Histories to Improve Bug Localization Performance}, 
  year={2013},
  volume={},
  number={},
  pages={543-548},
  keywords={History;Mathematical model;Equations;Androids;Humanoid robots;Computer bugs;Vectors;Software Maintenance;Co-Change Histories;Bug Localization;Information Retrieval},
  doi={10.1109/SNPD.2013.92}}


  @INPROCEEDINGS{7476643,
  author={Rolfsnes, Thomas and Di Alesio, Stefano and Behjati, Razieh and Moonen, Leon and Binkley, Dave W.},
  booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)}, 
  title={Generalizing the Analysis of Evolutionary Coupling for Software Change Impact Analysis}, 
  year={2016},
  volume={1},
  number={},
  pages={201-212},
  keywords={History;Couplings;Software algorithms;Data mining;Software systems;Algorithm design and analysis;evolutionary coupling;software change impact analysis;targeted association rule mining;change recommendations;recommender systems},
  doi={10.1109/SANER.2016.101}}

@misc{ant_concat,
  title = {{Apache Ant Concat Task Documentation}},
  author = {{Apache Ant Project}},
  howpublished = {https://ant.apache.org/manual/api/org/apache/tools/ant/taskdefs/Concat.html},
  note = {Accessed on February 14, 2024}
}
